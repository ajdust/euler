module problems;

import std.stdio;
import std.conv;
import std.range;
import std.algorithm;
import std.math;
import std.array;
import sequences;

/*
  Multiples of 3 and 5

  If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6
  and 9. The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5
  below 1000.

  This can be solved more efficiently with a formula.

  The sum of the multiples of numbers can be given a formula. The set of multiples
  of 3 and 5 intersect at the multiples of 15. So the solution is the sum of the
  multiples of 3 added to the sum of the multiples of 5 minus the sum of the
  multiples of 15.

  The sum of natural numbers from 1 to n = n(n+1)/2
  The sum of the first n multiples of 3  = 3n(n+1)/2
  The sum of the first n multiples of 5  = 5n(n+1)/2
  The sum of the first n multiples of 15 = 15n(n+1)/2

  Simple integer division can find the size of n for a number at or under k and multiple m:
      n = k / m

  Hence, given a limit of multiples under k, the sum S for this problem can be computed:
      S = 3(k/3)((k/3)+1)/2 + 5(k/5)((k/5)+1)/2 - 15(k/15)((k/15)+1)/2

  With k = 999 this equates to 233168.
*/
string problem01()
{
    int sum = iota(1, 1000).filter!(v => v % 3 == 0 || v % 5 == 0).sum();

    return to!string(sum);
}

/*
  Even Fibonacci Numbers

  Each new term in the Fibonacci sequence is generated by adding
  the previous two terms. By starting with 1 and 2, the first 10 terms will be:

  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

  By considering the terms in the Fibonacci sequence whose values do not exceed
  four million, find the sum of the even-valued terms.
*/
string problem02()
{
    auto fibonacci = generate(fibonacci(0, 1));
    auto sum = until!(v => v > 4000000)(fibonacci).filter!(v => v % 2 == 0).sum();

    return to!string(sum);
}

/*
  Largest prime factor

  The prime factors of 13195 are 5, 7, 13 and 29.
  What is the largest prime factor of the number 600851475143 ?
*/
string problem03()
{
    auto answer = primeFactors(600851475143).reduce!((a, b) => a > b ? a : b);
    return to!string(answer);
}

/*
  Largest palindromic number

  A palindromic number reads the same both ways. The largest palindrome
  made from the product of two 2-digit numbers is 9009 = 91 × 99.
  Find the largest palindrome made from the product of two 3-digit numbers.
*/
string problem04()
{
    bool isPalindrome(int n)
    {
        auto s = to!string(n);
        auto l = s.length / 2;
        for (auto i = 0, j = s.length - 1; i < j; i += 1, j -= 1)
        {
            if (s[i] != s[j])
                return false;
        }
        return true;
    }

    auto matches = iota(101, 999).map!(i => iota(101, i)
            .filter!(x => isPalindrome(x * i)).map!(x => x * i)).joiner();

    return to!string(matches.reduce!((a, b) => a > b ? a : b));
}


int[TCounted] countBy(T, TCounted)(T[] elements, TCounted function(T) counted)
{
    int[TCounted] m;
    foreach (T elem; elements)
    {
        auto key = counted(elem);
        auto count = key in m;
        if (count is null)
            m[key] = 1;
        else
            *count = *count + 1;
    }

    return m;
}

T pow(T)(T num, int to)
{
    auto n = num;
    for (int i = 0; i < to - 1; i++)
        n *= num;

    return n;
}

unittest
{
    int[] r = [1, 2, 2, 3, 3, 4, 2, 1, 9];
    auto counts = r.countBy((int x) => x);

    assert(counts[1] == 2);
    assert(counts[2] == 3);
    assert(counts[3] == 2);
    assert(counts[4] == 1);
    assert(counts[9] == 1);
    assert(counts.keys.length == 5);
}

/*
  Smallest multiple

  2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
  What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
*/
string problem05()
{
    int[long] countCommonFactors(long n)
    {
        return sequences.primeFactors(n).countBy((long x) => x);
    }

    int[long] unionMaps(int[long] m1, int[long] m2)
    {
        int[long] m;
        foreach (k; m1.keys)
            m[k] = m1[k];
        foreach (k; m2.keys)
        {
            auto current = k in m;
            if (current is null)
                m[k] = m2[k];
            else if (m2[k] > *current)
                *current = m2[k];
        }

        return m;
    }

    int[long] unionManyMaps(int[long][] ms)
    {
        return ms.reduce!(unionMaps);
    }

    auto factors = unionManyMaps(iota(1, 20)
        .map!(countCommonFactors)
        .array);
    long product = 1L;
    foreach (kv; factors.byKeyValue())
        product *= kv.key.pow(kv.value);
    
    return product.to!string();
}


string problem05_2()
{
    int[long] collectCommonFactors(int[] numbers)
    {
        int[long] maxCounts;

        foreach (int n; numbers)
        {
            long[] pfs = primeFactors(to!long(n));

            int[long] counts;
            foreach (long pf; pfs)
            {
                auto count = (pf in counts);
                if (count !is null)
                {
                    *count += 1;
                }
                else
                {
                    counts[pf] = 1;
                }
            }

            foreach (kv; counts.byKeyValue())
            {
                auto count = (kv.key in maxCounts);
                if (count !is null)
                {
                    *count = kv.value > *count ? kv.value : *count;
                }
                else
                {
                    maxCounts[kv.key] = kv.value;
                }
            }
        }

        return maxCounts;
    }

    int[] to20 = array(iota(1, 21));
    long answer = collectCommonFactors(to20).byKeyValue().map!(v => pow(v.key,
            v.value)).reduce!((a, b) => a * b);

    return to!string(answer);
}

/*
  Sum square difference

  The sum of the squares of the first ten natural numbers is,
  12 + 22 + ... + 102 = 385
  The square of the sum of the first ten natural numbers is,
  (1 + 2 + ... + 10)2 = 552 = 3025
  Hence the difference between the sum of the squares of the first ten natural numbers
  and the square of the sum is 3025 − 385 = 2640.

  Find the difference between the sum of the squares of the first one hundred natural
  numbers and the square of the sum.
*/
string problem06()
{
    long sumTo100 = iota(1, 101).sum();
    long sumSquaresTo100 = iota(1, 101).map!(v => v * v).sum();
    return to!string(abs(sumSquaresTo100 - (sumTo100 * sumTo100)));
}

/*
  10001st prime

  By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
  What is the 10001st prime number?
*/
string problem07()
{
    return to!string(generate(primes(0)).drop(10000).takeOne()[0]);
}

/*
  Largest product in a series

  The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

  73167176531330624919225119674426574742355349194934
  96983520312774506326239578318016984801869478851843
  85861560789112949495459501737958331952853208805511
  12540698747158523863050715693290963295227443043557
  66896648950445244523161731856403098711121722383113
  62229893423380308135336276614282806444486645238749
  30358907296290491560440772390713810515859307960866
  70172427121883998797908792274921901699720888093776
  65727333001053367881220235421809751254540594752243
  52584907711670556013604839586446706324415722155397
  53697817977846174064955149290862569321978468622482
  83972241375657056057490261407972968652414535100474
  82166370484403199890008895243450658541227588666881
  16427171479924442928230863465674813919123162824586
  17866458359124566529476545682848912883142607690042
  24219022671055626321111109370544217506941658960408
  07198403850962455444362981230987879927244284909188
  84580156166097919133875499200524063689912560717606
  05886116467109405077541002256983155200055935729725
  71636269561882670428252483600823257530420752963450

  Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
*/
string problem08()
{
    auto digits = array(`
        73167176531330624919225119674426574742355349194934
        96983520312774506326239578318016984801869478851843
        85861560789112949495459501737958331952853208805511
        12540698747158523863050715693290963295227443043557
        66896648950445244523161731856403098711121722383113
        62229893423380308135336276614282806444486645238749
        30358907296290491560440772390713810515859307960866
        70172427121883998797908792274921901699720888093776
        65727333001053367881220235421809751254540594752243
        52584907711670556013604839586446706324415722155397
        53697817977846174064955149290862569321978468622482
        83972241375657056057490261407972968652414535100474
        82166370484403199890008895243450658541227588666881
        16427171479924442928230863465674813919123162824586
        17866458359124566529476545682848912883142607690042
        24219022671055626321111109370544217506941658960408
        07198403850962455444362981230987879927244284909188
        84580156166097919133875499200524063689912560717606
        05886116467109405077541002256983155200055935729725
        71636269561882670428252483600823257530420752963450
        `.filter!(v => v >= '0' && v <= '9').map!(v => to!long(v - '0')));

    auto products = iota(0, digits.length - 14).map!(v => digits[v .. v + 13].reduce!((a,
            n) => a * n));

    return to!string(products.reduce!((a, b) => a > b ? a : b));
}

/*
  Special Pythagorean triplet

  A Pythagorean triplet is a set of three natural numbers, a LT b LT c, for which,
  a^2 + b^2 = c^2

  For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.

  There exists exactly one Pythagorean triplet for which a + b + c = 1000.
  Find the product a*b*c.
*/
string problem09()
{
    struct Square
    {
        int _1;
        int _2;
    }

    auto squaresTo1000 = array(iota(1, 1001).map!(v => Square(v, v * v)));
    auto l = squaresTo1000.length;
    Square ans_a;
    Square ans_b;
    Square ans_c;
    int t = 0;

    for (auto c_i = 0; c_i < l; c_i++)
        for (auto b_i = 0; b_i < c_i; b_i++)
            for (auto a_i = 0; a_i < b_i; a_i++)
            {
                auto c = squaresTo1000[c_i];
                auto b = squaresTo1000[b_i];
                auto a = squaresTo1000[a_i];
                if (a._2 + b._2 == c._2 && 1000 == a._1 + b._1 + c._1)
                {
                    ans_a = a;
                    ans_b = b;
                    ans_c = c;
                }
            }

    return to!string(ans_a._1 * ans_b._1 * ans_c._1);
}

/*
  Summation of primes

  The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
  Find the sum of all the primes below two million.
*/
string problem10()
{
    long z = 0;
    foreach (p; generate(primes(z)))
    {
        if (p > 2000000)
            break;
        z += p;
    }

    return to!string(z);
}
