package problems

import (
    "strconv"
    "strings"
    //"fmt"
)

/// Aaron Johnson
/// 2017-03-19

// Problem 1: Multiples of 3 and 5
// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6
// and 9. The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5
// below 1000.
func Problem01() string {
    sum := 0
    for i := 0; i < 1000; i++ {
        if i % 3 == 0 || i % 5 == 0 || i % 15 == 0 {
            sum += i
        }
    }
    return strconv.Itoa(sum)
}


// Problem 2: Even Fibonacci Numbers
// Each new term in the Fibonacci sequence is generated by adding
// the previous two terms. By starting with 1 and 2, the first 10 terms will be:
//
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values do not exceed
// four million, find the sum of the even-valued terms.
type HasNextInt interface {
    NextInt() int64
}

type Fib struct {
    a, b int64
}

func (f *Fib) NextInt() int64 {
    var next = f.a
    f.a, f.b = f.b, f.a + f.b
    return next
}

var _ HasNextInt = (*Fib)(nil) // enforce HasNextInt for Fib

func Problem02() string {

    var f HasNextInt = &Fib{0, 1}
    current := f.NextInt()

    var sum int64 = 0
    for current < 4000000 {
        current = f.NextInt()
        if current % 2 == 0 {
            sum += current
        }
    }

    return strconv.FormatInt(sum, 10)
}


// Problem 3: Largest prime factor
// The prime factors of 13195 are 5, 7, 13 and 29.
// What is the largest prime factor of the number 600851475143 ?
type Primes struct {
    n, last int64
    sieve map[int64]int64
}

func InitPrimes() *Primes {
    return &Primes{3, 2, make(map[int64]int64)}
}

func (p *Primes) NextInt() int64 {
    prime, ok := p.sieve[p.n]
    for ok {
        // don't need this key - remove it to save space
        delete(p.sieve, p.n)

        // add composite
        var n_ int64 = p.n + prime + prime
        _, ok_ := p.sieve[n_]
        for ok_ {
            n_ += prime + prime
            _, ok_ = p.sieve[n_]
        }
        p.sieve[n_] = prime

        p.n += 2
        prime, ok = p.sieve[p.n]
    }

    // add composite in prep for next round
    p.sieve[p.n * p.n] = p.n
    r := p.last
    p.last = p.n
    p.n += 2
    return r
}

func GetPrimeFactors(of int64) []int64 {
    pfacts := make([]int64, 0)
    quotient := of

    primes := InitPrimes()
    for {
        prime := primes.NextInt()
        if prime > quotient {
            break
        }

        remainder := quotient % prime
        for remainder == 0 {
            quotient = quotient / prime
            remainder = quotient % prime
            pfacts = append(pfacts, prime)
        }
    }

    return pfacts
}

func Problem03() string {
    pfs := GetPrimeFactors(600851475143)
    var maxpf int64 = 0
    for _, pf := range pfs {
        if pf > maxpf {
            maxpf = pf
        }
    }

    return strconv.FormatInt(maxpf, 10)
}


// Problem 4
// Largest palindromic product
// A palindromic number reads the same both ways. The largest palindrome
// made from the product of two 2-digit numbers is 9009 = 91 × 99.
// Find the largest palindrome made from the product of two 3-digit numbers.
func IsPalindrome(s string) bool {
    for i, j := 0, len(s) - 1; i < j; i, j = i + 1, j - 1 {
        if s[i] != s[j] {
            return false
        }
    }
    return true
}

func Problem04() string {
    maxv := 0
    for i := 100; i <= 999; i += 1 {
        for j := 100; j <= i; j += 1 {
            curv := i*j
            if IsPalindrome(strconv.Itoa(curv)) && curv > maxv {
                maxv = curv
            }
        }
    }

    return strconv.Itoa(maxv)
}


// Problem 5: Smallest Multiple
// 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
// What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
func CountInt64(nums []int64) map[int64]int {
    counts := make(map[int64]int)
    for _, num := range nums {
        if val, ok := counts[num]; ok {
            counts[num] = val + 1
        } else {
            counts[num] = 1
        }
    }

    return counts
}

func ChooseLargest(numMaps []map[int64]int) map[int64]int {
    maxCounts := make(map[int64]int)
    for _, numMap := range numMaps {
        for numKey, numVal := range numMap {
            if maxVal, ok := maxCounts[numKey]; ok {
                if numVal > maxVal {
                    maxCounts[numKey] = numVal
                }
            } else {
                maxCounts[numKey] = numVal
            }
        }
    }

    return maxCounts
}

func Problem05() string {
    eachPfs := make([][]int64, 20)
    var i int64
    for i = 2; i <= 20; i += 1 {
        pfs := GetPrimeFactors(i)
        eachPfs = append(eachPfs, pfs)
    }

    eachCounts := make([]map[int64]int, 20)
    for _, pfs := range eachPfs {
        eachCounts = append(eachCounts, CountInt64(pfs))
    }

    largestCounts := ChooseLargest(eachCounts)
    var product int64 = 1
    for key, val := range largestCounts {
        for p := 0; p < val; p += 1 {
            product *= key
        }
    }

    return strconv.FormatInt(product, 10)
}


// Problem 6: Sum square difference
//
// The sum of the squares of the first ten natural numbers is,
// 12 + 22 + ... + 102 = 385
// The square of the sum of the first ten natural numbers is,
// (1 + 2 + ... + 10)2 = 552 = 3025
// Hence the difference between the sum of the squares of the first ten natural numbers
// and the square of the sum is 3025 − 385 = 2640.
//
// Find the difference between the sum of the squares of the first one hundred natural
// numbers and the square of the sum.
func Problem06() string {
    sumOfSquares := 0
    for i := 1; i <= 100; i += 1 {
        sumOfSquares += i * i
    }

    squareOfSums := 0
    for i := 1; i <= 100; i += 1 {
        squareOfSums += i
    }
    squareOfSums *= squareOfSums

    return strconv.Itoa(squareOfSums - sumOfSquares)
}


// Problem 7: 10001st prime
//
// By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13,
// we can see that the 6th prime is 13. What is the 10001st prime number?
func Problem07() string {
    primes := InitPrimes()
    var prime int64
    for i := 0; i <= 10000; i += 1 {
        prime = primes.NextInt()
    }

    return strconv.FormatInt(prime, 10)
}


// Problem 8: Largest product in a series
// The four adjacent digits in the 1000-digit number that have the greatest
// product are 9 × 9 × 8 × 9 = 5832.
//
// 73167176531330624919225119674426574742355349194934
// 96983520312774506326239578318016984801869478851843
// 85861560789112949495459501737958331952853208805511
// 12540698747158523863050715693290963295227443043557
// 66896648950445244523161731856403098711121722383113
// 62229893423380308135336276614282806444486645238749
// 30358907296290491560440772390713810515859307960866
// 70172427121883998797908792274921901699720888093776
// 65727333001053367881220235421809751254540594752243
// 52584907711670556013604839586446706324415722155397
// 53697817977846174064955149290862569321978468622482
// 83972241375657056057490261407972968652414535100474
// 82166370484403199890008895243450658541227588666881
// 16427171479924442928230863465674813919123162824586
// 17866458359124566529476545682848912883142607690042
// 24219022671055626321111109370544217506941658960408
// 07198403850962455444362981230987879927244284909188
// 84580156166097919133875499200524063689912560717606
// 05886116467109405077541002256983155200055935729725
// 71636269561882670428252483600823257530420752963450
//
// Find the thirteen adjacent digits in the 1000-digit number that have the
// greatest product. What is the value of this product?
func Problem08() string {
    block := `
        73167176531330624919225119674426574742355349194934
        96983520312774506326239578318016984801869478851843
        85861560789112949495459501737958331952853208805511
        12540698747158523863050715693290963295227443043557
        66896648950445244523161731856403098711121722383113
        62229893423380308135336276614282806444486645238749
        30358907296290491560440772390713810515859307960866
        70172427121883998797908792274921901699720888093776
        65727333001053367881220235421809751254540594752243
        52584907711670556013604839586446706324415722155397
        53697817977846174064955149290862569321978468622482
        83972241375657056057490261407972968652414535100474
        82166370484403199890008895243450658541227588666881
        16427171479924442928230863465674813919123162824586
        17866458359124566529476545682848912883142607690042
        24219022671055626321111109370544217506941658960408
        07198403850962455444362981230987879927244284909188
        84580156166097919133875499200524063689912560717606
        05886116467109405077541002256983155200055935729725
        71636269561882670428252483600823257530420752963450
        `
    block = strings.Replace(block, "\n", "", -1)
    block = strings.Replace(block, "\r", "", -1)
    block = strings.Replace(block, "\t", "", -1)
    block = strings.Replace(block, " ", "", -1)

    digits := make([]int, 1000)
    for _, ch := range block {
        digits = append(digits, int(ch - '0'))
    }

    products := make([]int64, 1000)
    for i, _ := range digits {
        var product int64 = 1
        for j := i; j < i+13 && j < len(digits); j += 1 {
            product *= int64(digits[j])
        }
        products = append(products, product)
    }

    var maxProduct int64 = 1
    for _, num := range products {
        if num > maxProduct {
            maxProduct = num
        }
    }

    return strconv.FormatInt(maxProduct, 10)
}


// Problem 9: Special Pythagorean Triplet
// A Pythagorean triplet is a set of three natural numbers, a LT b LT c, for which,
// a^2 + b^2 = c^2
//
// For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.
//
// There exists exactly one Pythagorean triplet for which a + b + c = 1000.
// Find the product a*b*c.
func Problem09() string {
    for c := 1; c <= 999; c += 1 {
        for b := 1; b < c; b += 1 {
            for a := 1; a < b; a += 1 {
                if a*a + b*b == c*c && a + b + c == 1000 {
                    return strconv.Itoa(a * b * c)
                }
            }
        }
    }

    return ""
}


// Problem 10: Summation of primes
// The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
// Find the sum of all the primes below two million.
func Problem10() string {
    primes := InitPrimes()
    prime := primes.NextInt()
    var total int64 = 0
    for prime < 2000000 {
        total += prime
        prime = primes.NextInt()
    }

    return strconv.FormatInt(total, 10)
}
