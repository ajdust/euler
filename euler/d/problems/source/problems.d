module problems;

import std.stdio;
import std.conv;
import std.range;
import std.algorithm;
import std.math;
import std.array;
import std.functional;
import std.typecons;
import std.algorithm.comparison : equal;
import std.container.rbtree;
import special;
import sequences;

/*
  Multiples of 3 and 5

  If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6
  and 9. The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5
  below 1000.

  This can be solved more efficiently with a formula.

  The sum of the multiples of numbers can be given a formula. The set of multiples
  of 3 and 5 intersect at the multiples of 15. So the solution is the sum of the
  multiples of 3 added to the sum of the multiples of 5 minus the sum of the
  multiples of 15.

  The sum of natural numbers from 1 to n = n(n+1)/2
  The sum of the first n multiples of 3  = 3n(n+1)/2
  The sum of the first n multiples of 5  = 5n(n+1)/2
  The sum of the first n multiples of 15 = 15n(n+1)/2

  Simple integer division can find the size of n for a number at or under k and multiple m:
      n = k / m

  Hence, given a limit of multiples under k, the sum S for this problem can be computed:
      S = 3(k/3)((k/3)+1)/2 + 5(k/5)((k/5)+1)/2 - 15(k/15)((k/15)+1)/2

  With k = 999 this equates to 233168.
*/
string problem01()
{
    int sum = iota(1, 1000).filter!(v => v % 3 == 0 || v % 5 == 0).sum();

    return to!string(sum);
}

/*
  Even Fibonacci Numbers

  Each new term in the Fibonacci sequence is generated by adding
  the previous two terms. By starting with 1 and 2, the first 10 terms will be:

  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

  By considering the terms in the Fibonacci sequence whose values do not exceed
  four million, find the sum of the even-valued terms.
*/
string problem02()
{
    int sum = 0;
    foreach (f; generate(fibonacci(0, 1)))
    {
        if (f >= 4_000_000)
            break;
        else if (f % 2 == 0)
            sum += f;
    }

    return to!string(sum);

    // not working with ldc2
    // auto sum = until!(v => v >= 4_000_000)(fib).filter!(v => v % 2 == 0).sum;
    // return to!string(sum);
}

/*
  Largest prime factor

  The prime factors of 13195 are 5, 7, 13 and 29.
  What is the largest prime factor of the number 600851475143 ?
*/
string problem03()
{
    auto answer = primeFactors(600_851_475_143).reduce!((a, b) => a > b ? a : b);
    return to!string(answer);
}

/*
  Largest palindromic number

  A palindromic number reads the same both ways. The largest palindrome
  made from the product of two 2-digit numbers is 9009 = 91 × 99.
  Find the largest palindrome made from the product of two 3-digit numbers.
*/
string problem04()
{
    bool isPalindrome(int n)
    {
        auto s = to!string(n);
        auto l = s.length / 2;
        for (auto i = 0, j = s.length - 1; i < j; i += 1, j -= 1)
        {
            if (s[i] != s[j])
                return false;
        }
        return true;
    }

    auto matches = iota(101, 999).map!(i => iota(101, i)
            .filter!(x => isPalindrome(x * i)).map!(x => x * i)).joiner();

    return to!string(matches.reduce!((a, b) => a > b ? a : b));
}

/*
  Smallest multiple

  2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
  What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
*/
string problem05()
{
    int[long] countCommonFactors(long n)
    {
        return sequences.primeFactors(n).countBy((long x) => x);
    }

    int[long] unionMaps(int[long] m1, int[long] m2)
    {
        int[long] m;
        foreach (k; m1.keys)
            m[k] = m1[k];
        foreach (k; m2.keys)
        {
            auto current = k in m;
            if (current is null)
                m[k] = m2[k];
            else if (m2[k] > *current)
                *current = m2[k];
        }

        return m;
    }

    int[long] unionManyMaps(int[long][] ms)
    {
        return ms.reduce!(unionMaps);
    }

    auto factors = unionManyMaps(iota(1, 20)
        .map!(countCommonFactors)
        .array);
    long product = 1L;
    foreach (kv; factors.byKeyValue())
        product *= kv.key.pow(kv.value);
    
    return product.to!string();
}

/*
  Sum square difference

  The sum of the squares of the first ten natural numbers is,
  12 + 22 + ... + 102 = 385
  The square of the sum of the first ten natural numbers is,
  (1 + 2 + ... + 10)2 = 552 = 3025
  Hence the difference between the sum of the squares of the first ten natural numbers
  and the square of the sum is 3025 − 385 = 2640.

  Find the difference between the sum of the squares of the first one hundred natural
  numbers and the square of the sum.
*/
string problem06()
{
    long sumTo100 = iota(1, 101).sum();
    long sumSquaresTo100 = iota(1, 101).map!(v => v * v).sum();
    return to!string(abs(sumSquaresTo100 - (sumTo100 * sumTo100)));
}

/*
  10001st prime

  By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
  What is the 10001st prime number?
*/
string problem07()
{
    int i = 0;
    long p;
    foreach (p_; generate(primes!long))
    {
        p = p_;
        i += 1;
        if (i > 10_000)
            break;
    }

    return to!string(p);

    // not working with ldc2
    // return to!string(generate(primes!long).drop(10_000).takeOne()[0]);
}

/*
  Largest product in a series

  The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

  73167176531330624919225119674426574742355349194934
  96983520312774506326239578318016984801869478851843
  85861560789112949495459501737958331952853208805511
  12540698747158523863050715693290963295227443043557
  66896648950445244523161731856403098711121722383113
  62229893423380308135336276614282806444486645238749
  30358907296290491560440772390713810515859307960866
  70172427121883998797908792274921901699720888093776
  65727333001053367881220235421809751254540594752243
  52584907711670556013604839586446706324415722155397
  53697817977846174064955149290862569321978468622482
  83972241375657056057490261407972968652414535100474
  82166370484403199890008895243450658541227588666881
  16427171479924442928230863465674813919123162824586
  17866458359124566529476545682848912883142607690042
  24219022671055626321111109370544217506941658960408
  07198403850962455444362981230987879927244284909188
  84580156166097919133875499200524063689912560717606
  05886116467109405077541002256983155200055935729725
  71636269561882670428252483600823257530420752963450

  Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
*/
string problem08()
{
    auto digits = array(`
        73167176531330624919225119674426574742355349194934
        96983520312774506326239578318016984801869478851843
        85861560789112949495459501737958331952853208805511
        12540698747158523863050715693290963295227443043557
        66896648950445244523161731856403098711121722383113
        62229893423380308135336276614282806444486645238749
        30358907296290491560440772390713810515859307960866
        70172427121883998797908792274921901699720888093776
        65727333001053367881220235421809751254540594752243
        52584907711670556013604839586446706324415722155397
        53697817977846174064955149290862569321978468622482
        83972241375657056057490261407972968652414535100474
        82166370484403199890008895243450658541227588666881
        16427171479924442928230863465674813919123162824586
        17866458359124566529476545682848912883142607690042
        24219022671055626321111109370544217506941658960408
        07198403850962455444362981230987879927244284909188
        84580156166097919133875499200524063689912560717606
        05886116467109405077541002256983155200055935729725
        71636269561882670428252483600823257530420752963450
        `.filter!(v => v >= '0' && v <= '9').map!(v => to!long(v - '0')));

    auto products = iota(0, digits.length - 14).map!(v => digits[v .. v + 13].reduce!((a,
            n) => a * n));

    return to!string(products.reduce!((a, b) => a > b ? a : b));
}

/*
  Special Pythagorean triplet

  A Pythagorean triplet is a set of three natural numbers, a LT b LT c, for which,
  a^2 + b^2 = c^2

  For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.

  There exists exactly one Pythagorean triplet for which a + b + c = 1000.
  Find the product a*b*c.
*/
string problem09()
{
    struct Square
    {
        int _1;
        int _2;
    }

    auto squaresTo1000 = array(iota(1, 1001).map!(v => Square(v, v * v)));
    auto l = squaresTo1000.length;
    Square ans_a;
    Square ans_b;
    Square ans_c;
    int t = 0;

    for (auto c_i = 0; c_i < l; c_i++)
        for (auto b_i = 0; b_i < c_i; b_i++)
            for (auto a_i = 0; a_i < b_i; a_i++)
            {
                auto c = squaresTo1000[c_i];
                auto b = squaresTo1000[b_i];
                auto a = squaresTo1000[a_i];
                if (a._2 + b._2 == c._2 && 1000 == a._1 + b._1 + c._1)
                {
                    ans_a = a;
                    ans_b = b;
                    ans_c = c;
                }
            }

    return to!string(ans_a._1 * ans_b._1 * ans_c._1);
}

/*
  Summation of primes

  The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
  Find the sum of all the primes below two million.
*/
string problem10()
{
    long z = 0;
    foreach (p; generate(primes!long))
    {
        if (p > 2000000L)
            break;
        z += p;
    }

    return to!string(z);
}

/*
   Largest product in a grid

   In the 20×20 grid below, four numbers along a diagonal line have been marked in red.

   08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
   49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
   81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
   52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
   22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
   24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
   32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
   67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
   24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
   21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
   78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
   16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
   86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
   19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
   04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
   88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
   04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
   20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
   20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
   01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48

   The product of these numbers is 26 × 63 × 78 × 14 = 1788696.

   What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?
*/
string problem11()
{
    auto grid = [
        [  8, 2,22,97,38,15, 0,40, 0,75, 4, 5, 7,78,52,12,50,77,91, 8 ],
        [ 49,49,99,40,17,81,18,57,60,87,17,40,98,43,69,48, 4,56,62, 0 ],
        [ 81,49,31,73,55,79,14,29,93,71,40,67,53,88,30, 3,49,13,36,65 ],
        [ 52,70,95,23, 4,60,11,42,69,24,68,56, 1,32,56,71,37, 2,36,91 ],
        [ 22,31,16,71,51,67,63,89,41,92,36,54,22,40,40,28,66,33,13,80 ],
        [ 24,47,32,60,99, 3,45, 2,44,75,33,53,78,36,84,20,35,17,12,50 ],
        [ 32,98,81,28,64,23,67,10,26,38,40,67,59,54,70,66,18,38,64,70 ],
        [ 67,26,20,68, 2,62,12,20,95,63,94,39,63, 8,40,91,66,49,94,21 ],
        [ 24,55,58, 5,66,73,99,26,97,17,78,78,96,83,14,88,34,89,63,72 ],
        [ 21,36,23, 9,75, 0,76,44,20,45,35,14, 0,61,33,97,34,31,33,95 ],
        [ 78,17,53,28,22,75,31,67,15,94, 3,80, 4,62,16,14, 9,53,56,92 ],
        [ 16,39, 5,42,96,35,31,47,55,58,88,24, 0,17,54,24,36,29,85,57 ],
        [ 86,56, 0,48,35,71,89, 7, 5,44,44,37,44,60,21,58,51,54,17,58 ],
        [ 19,80,81,68, 5,94,47,69,28,73,92,13,86,52,17,77, 4,89,55,40 ],
        [  4,52, 8,83,97,35,99,16, 7,97,57,32,16,26,26,79,33,27,98,66 ],
        [ 88,36,68,87,57,62,20,72, 3,46,33,67,46,55,12,32,63,93,53,69 ],
        [  4,42,16,73,38,25,39,11,24,94,72,18, 8,46,29,32,40,62,76,36 ],
        [ 20,69,36,41,72,30,23,88,34,62,99,69,82,67,59,85,74, 4,36,16 ],
        [ 20,73,35,29,78,31,90, 1,74,31,49,71,48,86,81,16,23,57, 5,54 ],
        [  1,70,54,71,83,51,54,69,16,92,33,48,61,43,52, 1,89,19,67,48 ]
    ];

    auto atOrDefault(int[][] g, int defaultValue, int x, int y)
    {
        return y < 20 && y >= 0 && x < 20 && x >= 0 ? g[y][x] : defaultValue;
    }

    auto getLargestAdjacent(int[][] g, int x, int y)
    {
        alias at = partialApply!(atOrDefault, g, 1);

        auto right = [ at(x, y), at(x+1, y), at(x+2, y), at(x+3, y) ].product();
        auto down = [ at(x, y), at(x, y+1), at(x, y+2), at(x, y+3) ].product();
        auto downright = [ at(x, y), at(x+1, y+1), at(x+2, y+2), at(x+3, y+3) ].product();
        auto downleft = [ at(x, y), at(x-1, y+1), at(x-2, y+2), at(x-3, y+3) ].product();
        return max(right, down, downright, downleft);
    }

    return iota(0, 20).map!(x => iota(0, 20).map!(y => tuple!("x", "y")(x, y)))
        .joiner
        .map!(ij => getLargestAdjacent(grid, ij.x, ij.y))
        .array
        .maximum()
        .to!string();
}

/*
  Highly divisible triangular number

  The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 
  1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 
  Let us list the factors of the first seven triangle numbers:

  1: 1
  3: 1,3
  6: 1,2,3,6
  10: 1,2,5,10
  15: 1,3,5,15
  21: 1,3,7,21
  28: 1,2,4,7,14,28
 
  We can see that 28 is the first triangle number to have over five divisors.
 
  What is the value of the first triangle number to have over five hundred divisors?
*/
string problem12()
{
    // dlang: no set container
    // dlang: uniq() is not distinct()

    alias mPrimeFactors = memoize!(primeFactors!long);
    long[][long] mfactors;
    long[] getFactors(long n)
    {
        auto fs = (n in mfactors);
        if (fs !is null)
            return *fs;

        auto factors = [1L];
        factors.insertInPlace(1, mPrimeFactors(n).uniq().array);
        factors.insertInPlace(factors.length, [n]);
        auto newFactors = factors
            .map!(prime => n / prime)
            .filter!(factor => !factors.canFind(factor))
            .map!(factor => getFactors(factor))
            .joiner
            .array;
        factors.insertInPlace(factors.length, newFactors);

        auto allFactors = factors.distinct().array;
        mfactors[n] = allFactors;
        return allFactors;
    }

    auto getNumberFactors(long n)
    {
        return getFactors(n).length;
    }

    foreach (tn; generate(triangeNumbers!long))
    {
        if (getNumberFactors(tn) > 500)
            return to!string(tn);
    }
}
