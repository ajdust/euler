// Author: Aaron Johnson
// Date:   2015-03-07
//
// Solves Euler problem 29.

using System;
using System.Collections.Generic;
using System.Linq;

namespace Cs.Problems
{
    /// <title>Distinct powers</title>
    /// <summary>
    /// Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:
    ///
    ///     2^2=4, 2^3=8, 2^4=16, 2^5=32
    ///     3^2=9, 3^3=27, 3^4=81, 3^5=243
    ///     4^2=16, 4^3=64, 4^4=256, 4^5=1024
    ///     5^2=25, 5^3=125, 5^4=625, 5^5=3125
    ///
    /// If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:
    ///
    /// 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
    ///
    /// How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?
    ///
    /// </summary>
    /// <remarks>This problem uses Problem 3's GetPrimeFactors.</remarks>
    /// <answer>9183</answer>
    public class Problem029 : IProblem
    {
        /// <summary>
        /// Find the prime factors of a^b.
        /// </summary>
        public static IEnumerable<long> PowerFactors(int a, int b)
        {
            var baseFactors = Sequences.GetPrimeFactors(a);
            var allFactors = Enumerable.Range(0, b).SelectMany(n => baseFactors);
            return (from factor in allFactors orderby factor select factor);
        }

        public string Solve()
        {
            var abCombinations = from i in Enumerable.Range(2, 99)
                                 from j in Enumerable.Range(2, 99)
                                 select Tuple.Create(i, j);
            var answer = abCombinations
                .Select(n => String.Join(" ", PowerFactors(n.Item1, n.Item2).Select(x => x.ToString())));
            // there is undoubtedly a faster way to use distinct over sorted lists than converting them into strings
            return answer.Distinct().Count().ToString();
        }
    }
}