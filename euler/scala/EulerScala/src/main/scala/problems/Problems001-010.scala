/**
  * Created by aaron on 8/14/2016.
  */

package problems

import scala.collection._

/*
  Multiples of 3 and 5

  If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6
  and 9. The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5
  below 1000.

  This can be solved more efficiently with a formula.

  The sum of the multiples of numbers can be given a formula. The set of multiples
  of 3 and 5 intersect at the multiples of 15. So the solution is the sum of the
  multiples of 3 added to the sum of the multiples of 5 minus the sum of the
  multiples of 15.

  The sum of natural numbers from 1 to n = n(n+1)/2
  The sum of the first n multiples of 3  = 3n(n+1)/2
  The sum of the first n multiples of 5  = 5n(n+1)/2
  The sum of the first n multiples of 15 = 15n(n+1)/2

  Simple integer division can find the size of n for a number at or under k and multiple m:
      n = k / m

  Hence, given a limit of multiples under k, the sum S for this problem can be computed:
      S = 3(k/3)((k/3)+1)/2 + 5(k/5)((k/5)+1)/2 - 15(k/15)((k/15)+1)/2

  With k = 999 this equates to 233168.
*/
class Problem001 extends Problem {
  private def bruteSolve(limit : Int) =
    (for (n <- 1 to limit if n % 3 == 0 || n % 5 == 0) yield n).sum

  private def quickSolve(k : Int) =
    3*(k/3)*((k/3) + 1)/2 + 5*(k/5)*((k/5)+1)/2 - 15*(k/15)*((k/15)+1)/2

  override def solve: String = {
    bruteSolve(999).toString
  }
}

/*
  Even Fibonacci Numbers

  Each new term in the Fibonacci sequence is generated by adding
  the previous two terms. By starting with 1 and 2, the first 10 terms will be:

  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

  By considering the terms in the Fibonacci sequence whose values do not exceed
  four million, find the sum of the even-valued terms.
*/
class Problem002 extends Problem {
  override def solve: String = Sequences.fibonacci
    .filter(n => n % 2 == 0)
    .takeWhile(n => n < 4000000)
    .sum
    .toString
}

/*
  Largest prime factor

  The prime factors of 13195 are 5, 7, 13 and 29.
  What is the largest prime factor of the number 600851475143 ?
*/
class Problem003 extends Problem {
  override def solve: String = Sequences.primeFactors(600851475143L).max.toString
}

/*
  Largest palindromic number

  A palindromic number reads the same both ways. The largest palindrome
  made from the product of two 2-digit numbers is 9009 = 91 × 99.
  Find the largest palindrome made from the product of two 3-digit numbers.
*/
class Problem004 extends Problem {
  def isPalindrome(n: Int): Boolean = {
    val s = n.toString.toList
    val l = s.length / 2
    s.take(l) == s.reverse.take(l)
  }
  override def solve: String = {
    val pals = for {
      i <- Range(101,999)
      j <- Range(101, i)
      if isPalindrome(i*j)
    } yield i*j

    pals.max.toString
  }
}

object TraversableExtensions {
  implicit class Extensions[T](val traversable: Traversable[T]) extends AnyVal {
    def countBy[TCounted](f: T => TCounted): immutable.Map[TCounted, Int] = {
      val m = mutable.Map.empty[TCounted, Int]
      for (elem <- traversable) {
        val key = f(elem)
        val count = m.getOrElse(key, 0)
        m.put(key, count+1)
      }
      m.toMap
    }
  }
}

/*
  Smallest multiple

  2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
  What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
*/
class Problem005 extends Problem {
  import TraversableExtensions._

  def countCommonFactors(n: Int): immutable.Map[Long, Int] =
    Sequences.primeFactors(n).countBy(identity)

  def unionMaps[K](m1: immutable.Map[K, Int], m2: immutable.Map[K, Int]): immutable.Map[K, Int] = {
    def folder(acc: immutable.Map[K, Int], newKv: Tuple2[K, Int]) = {
      acc.get(newKv._1) match {
        case Some(current) if current > newKv._2 => acc
        case _ => acc + newKv
      }
    }

    m1.foldLeft(m2)(folder)
  }

  def unionManyMaps[K](ms: Traversable[immutable.Map[K, Int]]) =
    ms.reduce { (m1,m2) => unionMaps(m1, m2) }

  override def solve: String =
    unionManyMaps(for { v <- 1 to 20 } yield countCommonFactors(v))
      .foldLeft(1L) { case (acc, kv) => acc * BigInt(kv._1).pow(kv._2).toLong }
      .toString()
}

/*
  Sum square difference

  The sum of the squares of the first ten natural numbers is,
  12 + 22 + ... + 102 = 385
  The square of the sum of the first ten natural numbers is,
  (1 + 2 + ... + 10)2 = 552 = 3025
  Hence the difference between the sum of the squares of the first ten natural numbers
  and the square of the sum is 3025 − 385 = 2640.

  Find the difference between the sum of the squares of the first one hundred natural
  numbers and the square of the sum.
*/
class Problem006 extends Problem {
  private val sum1to100 = (1 to 100).sum
  override def solve: String = math.abs((1 to 100).map(x => x*x).sum - (sum1to100 * sum1to100)).toString
}

/*
  10001st prime

  By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
  What is the 10001st prime number?
*/
class Problem007 extends Problem {
  override def solve: String = Sequences.primes.drop(10000).head.toString
}

/*
  Largest product in a series

  The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

  73167176531330624919225119674426574742355349194934
  96983520312774506326239578318016984801869478851843
  85861560789112949495459501737958331952853208805511
  12540698747158523863050715693290963295227443043557
  66896648950445244523161731856403098711121722383113
  62229893423380308135336276614282806444486645238749
  30358907296290491560440772390713810515859307960866
  70172427121883998797908792274921901699720888093776
  65727333001053367881220235421809751254540594752243
  52584907711670556013604839586446706324415722155397
  53697817977846174064955149290862569321978468622482
  83972241375657056057490261407972968652414535100474
  82166370484403199890008895243450658541227588666881
  16427171479924442928230863465674813919123162824586
  17866458359124566529476545682848912883142607690042
  24219022671055626321111109370544217506941658960408
  07198403850962455444362981230987879927244284909188
  84580156166097919133875499200524063689912560717606
  05886116467109405077541002256983155200055935729725
  71636269561882670428252483600823257530420752963450

  Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
*/
class Problem008 extends Problem {
  private val chars = immutable.Map(
    '0' -> 0L, '1' -> 1L, '2' -> 2L, '3' -> 3L, '4' -> 4L,
    '5' -> 5L, '6' -> 6L, '7' -> 7L, '8' -> 8L, '9' -> 9L)
  private val digits: Seq[Long] =
    """
    73167176531330624919225119674426574742355349194934
    96983520312774506326239578318016984801869478851843
    85861560789112949495459501737958331952853208805511
    12540698747158523863050715693290963295227443043557
    66896648950445244523161731856403098711121722383113
    62229893423380308135336276614282806444486645238749
    30358907296290491560440772390713810515859307960866
    70172427121883998797908792274921901699720888093776
    65727333001053367881220235421809751254540594752243
    52584907711670556013604839586446706324415722155397
    53697817977846174064955149290862569321978468622482
    83972241375657056057490261407972968652414535100474
    82166370484403199890008895243450658541227588666881
    16427171479924442928230863465674813919123162824586
    17866458359124566529476545682848912883142607690042
    24219022671055626321111109370544217506941658960408
    07198403850962455444362981230987879927244284909188
    84580156166097919133875499200524063689912560717606
    05886116467109405077541002256983155200055935729725
    71636269561882670428252483600823257530420752963450
    """.replace(" ", "").replace("\r", "").replace("\n", "")
      .filter(x => chars.contains(x))
      .map(x => chars.getOrElse(x, 1L))

  override def solve: String = {
    val d = digits.toList
    val digitProducts = d.zipWithIndex.map({ case (_, i) => d.slice(i, i + 13).product })
    digitProducts.max.toString
  }
}

/*
  Special Pythagorean triplet

  A Pythagorean triplet is a set of three natural numbers, a LT b LT c, for which,
  a^2 + b^2 = c^2

  For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.

  There exists exactly one Pythagorean triplet for which a + b + c = 1000.
  Find the product a*b*c.
*/
class Problem009 extends Problem {

  private val squaresTo1000: Seq[(Int, Int)] = (1 to 1000).map(x => x -> x * x)
  override def solve: String = {
    val triplets =
      for { c <- squaresTo1000
          b <- squaresTo1000.takeWhile(x => x._1 < c._1)
          a <- squaresTo1000.takeWhile(x => x._1 < b._1)
          if a._2 + b._2 == c._2 && 1000 == a._1 + b._1 + c._1 }
      yield (c, b, a)

    val answer = triplets.head
    (answer._1._1 * answer._2._1 * answer._3._1).toString
  }
}

/*
  Summation of primes

  The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
  Find the sum of all the primes below two million.
*/
class Problem010 extends Problem {
  override def solve: String = Sequences.primes.takeWhile(x => x < 2000000).sum.toString
}
