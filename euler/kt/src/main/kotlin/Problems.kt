/**
 * Created by Aaron Johnson on 2017-06-10
 */

package problems

interface Problem {
    fun solve() : String
}

/*
  Multiples of 3 and 5

  If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6
  and 9. The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5
  below 1000.

  This can be solved more efficiently with a formula.

  The sum of the multiples of numbers can be given a formula. The set of multiples
  of 3 and 5 intersect at the multiples of 15. So the solution is the sum of the
  multiples of 3 added to the sum of the multiples of 5 minus the sum of the
  multiples of 15.

  The sum of natural numbers from 1 to n = n(n+1)/2
  The sum of the first n multiples of 3  = 3n(n+1)/2
  The sum of the first n multiples of 5  = 5n(n+1)/2
  The sum of the first n multiples of 15 = 15n(n+1)/2

  Simple integer division can find the size of n for a number at or under k and multiple m:
      n = k / m

  Hence, given a limit of multiples under k, the sum S for this problem can be computed:
      S = 3(k/3)((k/3)+1)/2 + 5(k/5)((k/5)+1)/2 - 15(k/15)((k/15)+1)/2

  With k = 999 this equates to 233168.
*/
class Problem01 : Problem {
    private fun bruteSolve(limit : Int): Int =
        (1..limit).filter { it % 3 == 0 || it % 5 == 0 }.sum()

    private fun quickSolve(k : Int): Int =
        3*(k/3)*((k/3) + 1)/2 + 5*(k/5)*((k/5)+1)/2 - 15*(k/15)*((k/15)+1)/2

    override fun solve(): String {
        return bruteSolve(999).toString()
    }
}

/*
  Even Fibonacci Numbers

  Each new term in the Fibonacci sequence is generated by adding
  the previous two terms. By starting with 1 and 2, the first 10 terms will be:

  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

  By considering the terms in the Fibonacci sequence whose values do not exceed
  four million, find the sum of the even-valued terms.
*/
class Problem02 : Problem {
    override fun solve(): String = Sequences.fibonacci
        .filter { it % 2 == 0 }
        .takeWhile { it < 4000000 }
        .sum()
        .toString()
}

/*
  Largest prime factor

  The prime factors of 13195 are 5, 7, 13 and 29.
  What is the largest prime factor of the number 600851475143 ?
*/
class Problem03 : Problem {
    override fun solve(): String = Sequences.primeFactors(600851475143L).max().toString()
}

/*
  Largest palindromic number

  A palindromic number reads the same both ways. The largest palindrome
  made from the product of two 2-digit numbers is 9009 = 91 × 99.
  Find the largest palindrome made from the product of two 3-digit numbers.
*/
class Problem04 : Problem {
    fun isPalindrome(n: Int): Boolean {
        val s = n.toString().toList()
        val l = s.count() / 2
        return s.take(l) == s.reversed().take(l)
    }

    override fun solve(): String {
        val pals = (101..999).flatMap { i ->
            (101..i).filter { isPalindrome(i * it) }
                    .map { i * it }
        }

        return pals.max().toString()
    }
}

/*
  Smallest multiple

  2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
  What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
*/
class Problem05 : Problem {
    private fun <A> counter(s: Iterable<A>): Map<A, Int> {
        fun counts(_s: Iterable<A>, m: Map<A, Int>): Map<A, Int> {
            val v = _s.firstOrNull() ?: return m
            val count = m[v]
            return when (count) {
                null -> counts(_s.drop(1), m.plus(Pair(v, 1)))
                else -> counts(_s.drop(1), m.plus(Pair(v, count + 1)))
            }
        }

        return counts(s, mapOf())
    }

    private fun countPrimeFactors(n: Long): Map<Long, Int> = counter(Sequences.primeFactors(n))

    private fun <K,V> unionMaps(m1: Map<K,V>, m2: Map<K,V>): Map<K,V> where V : Comparable<V> {
        fun folder(acc: Map<K,V>, next: Pair<K,V>): Map<K,V> {
            val existing = acc[next.first]
            return when {
                existing == null -> acc.plus(next)
                existing < next.second -> acc.plus(next)
                else -> acc
            }
        }
        val ms = m1.toList() + m2.toList()
        return ms.fold(mapOf(), ::folder)
    }

    private fun <K,V> unionManyMaps(ms: Sequence<Map<K,V>>): Map<K,V> where V : Comparable<V> {
        return ms.reduce(this::unionMaps)
    }

    private fun pow(b: Long, exp: Int): Long {
        var r = b
        var n = exp - 1
        while (n > 0) {
            r *= b
            n -= 1
        }
        return r
    }

    override fun solve(): String {
        return (2L..20L).map(this::countPrimeFactors)
                .let { unionManyMaps(it.asSequence()) }
                .let { it.toList().fold(1L) { acc, (k, v) -> acc * pow(k, v) } }
                .toString()
    }
}

/*
  Sum square difference

  The sum of the squares of the first ten natural numbers is,
  12 + 22 + ... + 102 = 385
  The square of the sum of the first ten natural numbers is,
  (1 + 2 + ... + 10)2 = 552 = 3025
  Hence the difference between the sum of the squares of the first ten natural numbers
  and the square of the sum is 3025 − 385 = 2640.

  Find the difference between the sum of the squares of the first one hundred natural
  numbers and the square of the sum.
*/
class Problem06 : Problem {
    private val sum1to100 = (1..100).sum()
    override fun solve(): String = Math.abs((1..100).map { it*it }.sum() - (sum1to100 * sum1to100)).toString()
}

/*
  10001st prime

  By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
  What is the 10001st prime number?
*/
class Problem07 : Problem {
    override fun solve(): String = Sequences.primes.drop(10000).first().toString()
}

/*
  Largest product in a series

  The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

  73167176531330624919225119674426574742355349194934
  96983520312774506326239578318016984801869478851843
  85861560789112949495459501737958331952853208805511
  12540698747158523863050715693290963295227443043557
  66896648950445244523161731856403098711121722383113
  62229893423380308135336276614282806444486645238749
  30358907296290491560440772390713810515859307960866
  70172427121883998797908792274921901699720888093776
  65727333001053367881220235421809751254540594752243
  52584907711670556013604839586446706324415722155397
  53697817977846174064955149290862569321978468622482
  83972241375657056057490261407972968652414535100474
  82166370484403199890008895243450658541227588666881
  16427171479924442928230863465674813919123162824586
  17866458359124566529476545682848912883142607690042
  24219022671055626321111109370544217506941658960408
  07198403850962455444362981230987879927244284909188
  84580156166097919133875499200524063689912560717606
  05886116467109405077541002256983155200055935729725
  71636269561882670428252483600823257530420752963450

  Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
*/
class Problem08 : Problem {
    private val chars = mapOf(
        Pair('0', 0L), Pair('1', 1L), Pair('2', 2L), Pair('3', 3L), Pair('4', 4L),
        Pair('5', 5L), Pair('6', 6L), Pair('7', 7L), Pair('8', 8L), Pair('9', 9L))
    private val digits: List<Long> =
    """
    73167176531330624919225119674426574742355349194934
    96983520312774506326239578318016984801869478851843
    85861560789112949495459501737958331952853208805511
    12540698747158523863050715693290963295227443043557
    66896648950445244523161731856403098711121722383113
    62229893423380308135336276614282806444486645238749
    30358907296290491560440772390713810515859307960866
    70172427121883998797908792274921901699720888093776
    65727333001053367881220235421809751254540594752243
    52584907711670556013604839586446706324415722155397
    53697817977846174064955149290862569321978468622482
    83972241375657056057490261407972968652414535100474
    82166370484403199890008895243450658541227588666881
    16427171479924442928230863465674813919123162824586
    17866458359124566529476545682848912883142607690042
    24219022671055626321111109370544217506941658960408
    07198403850962455444362981230987879927244284909188
    84580156166097919133875499200524063689912560717606
    05886116467109405077541002256983155200055935729725
    71636269561882670428252483600823257530420752963450
    """.replace(" ", "").replace("\r", "").replace("\n", "")
        .filter { chars.contains(it) }
        .map { chars.getOrDefault(it, 1L) }

    override fun solve(): String {
        val digitProducts = (0..digits.count() - 14).map { digits.slice((it..it + 12)).reduce { a, n -> a * n } }
        return digitProducts.max().toString()
    }
}

/*
  Special Pythagorean triplet

  A Pythagorean triplet is a set of three natural numbers, a LT b LT c, for which,
  a^2 + b^2 = c^2

  For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.

  There exists exactly one Pythagorean triplet for which a + b + c = 1000.
  Find the product a*b*c.
*/
class Problem09 : Problem {

    private val squaresTo1000: List<Pair<Int, Int>> = (1..1000).map { Pair(it, it * it) }
    override fun solve(): String {
        var v = Triple(Pair(0,0), Pair(0,0), Pair(0,0))
        for (c in squaresTo1000)
        for (b in squaresTo1000.takeWhile { it.first < c.first })
        for (a in squaresTo1000.takeWhile { it.first < b.first }) {
            if (a.second + b.second == c.second && 1000 == a.first + b.first + c.first) {
                v = Triple(a, b, c)
            }
        }

        return (v.first.first * v.second.first * v.third.first).toString()
    }
}

/*
  Summation of primes

  The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
  Find the sum of all the primes below two million.
*/
class Problem10 : Problem {
    override fun solve(): String = Sequences.primes.takeWhile { it < 2000000L }.sum().toString()
}

